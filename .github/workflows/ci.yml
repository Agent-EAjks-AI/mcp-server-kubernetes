name: CI

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4

      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install dependencies
        run: bun install

      - name: Set up Minikube
        run: |
          curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube-linux-amd64 /usr/local/bin/minikube
          minikube start --driver=docker
          minikube status

      - name: Start kubectl proxy
        run: |
          # Start the proxy in background and save the PID
          # This gets around having to set the ca cert stuff in bun/node at ~/.minikube/ca.crt which didnt work because no SAN name in cert.
          kubectl proxy --port=8080 &
          echo "KUBECTL_PROXY_PID=$!" >> $GITHUB_ENV

          # Give the proxy a moment to start
          sleep 3

          # Update the kubeconfig file to use the proxy URL
          sed -i 's|https://192.168.49.2:8443|http://localhost:8080|g' ~/.kube/config

          # Verify the change took effect
          grep "server:" ~/.kube/config

      - name: Run tests and generate TAP results
        run: |
          bun run test --reporter tap | tee test-results.tap

      - name: Process test results
        id: test-summary
        run: |
          # Calculate test results
          total=$(grep -c -E '^(ok|not ok)' test-results.tap || true)
          passed=$(grep -c '^ok' test-results.tap || true)
          failed=$(grep -c '^not ok' test-results.tap || true)

          # Set step outputs instead of env variables
          echo "total=${total:-0}" >> $GITHUB_OUTPUT
          echo "passed=${passed:-0}" >> $GITHUB_OUTPUT
          echo "failed=${failed:-0}" >> $GITHUB_OUTPUT

          # Create step summary
          echo '### üß™ Bun Test Summary' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| Metric      | Result |' >> $GITHUB_STEP_SUMMARY
          echo '|-------------|--------|' >> $GITHUB_STEP_SUMMARY
          echo "| Total Tests | **${total:-0}** |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚úÖ Passed   | **${passed:-0}** |" >> $GITHUB_STEP_SUMMARY
          echo "| ‚ùå Failed   | **${failed:-0}** |" >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY

          # Extract and display detailed test results
          echo '### Detailed Test Results' >> $GITHUB_STEP_SUMMARY
          echo '' >> $GITHUB_STEP_SUMMARY
          echo '| Status | Test Name | Duration |' >> $GITHUB_STEP_SUMMARY
          echo '|--------|-----------|----------|' >> $GITHUB_STEP_SUMMARY

          # Parse the TAP output for test details
          while IFS= read -r line; do
            if [[ $line =~ ^(ok|not ok)\ +([0-9]+)\ +(.*) ]]; then
              status="${BASH_REMATCH[1]}"
              test_num="${BASH_REMATCH[2]}"
              test_name="${BASH_REMATCH[3]}"
              
              # Extract duration if available (assuming it's in a format like "# duration 123ms")
              duration_line=$(grep -A 5 "^$status $test_num $test_name" test-results.tap | grep -E "# duration|# time" | head -n 1 || echo "# duration 0ms")
              duration=$(echo "$duration_line" | sed -E 's/.*# (duration|time) ([0-9]+ms|[0-9]+\.[0-9]+ms|[0-9]+\.[0-9]+s).*/\2/' || echo "N/A")
              
              # Format the status with an emoji
              if [[ $status == "ok" ]]; then
                emoji_status="‚úÖ PASS"
              else
                emoji_status="‚ùå FAIL"
              fi
              
              # Clean test name (remove duration or time info if included in name)
              clean_name=$(echo "$test_name" | sed -E 's/ # (duration|time) [0-9]+(\.[0-9]+)?(ms|s)$//')
              
              echo "| $emoji_status | $clean_name | $duration |" >> $GITHUB_STEP_SUMMARY
            fi
          done < test-results.tap

          # Add separator before summary
          echo '' >> $GITHUB_STEP_SUMMARY

          if [ "${failed:-0}" -eq "0" ]; then
            echo 'üéâ **All tests passed!**' >> $GITHUB_STEP_SUMMARY
          else
            echo '‚ö†Ô∏è **Some tests failed. Please review the details.**' >> $GITHUB_STEP_SUMMARY
            
            # Show details of failing tests
            echo '' >> $GITHUB_STEP_SUMMARY
            echo '### Failing Test Details' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -A 10 "^not ok" test-results.tap >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            exit 1
          fi

      ####### Comment this part until we figure out how permission issues.
      # - name: Comment on PR
      #   if: github.event_name == 'pull_request'
      #   uses: thollander/actions-comment-pull-request@v3
      #   with:
      #     github-token: ${{ github.token }}
      #     pr-number: ${{ github.event.pull_request.number }}
      #     message: |
      #       ### üß™ Bun Test Summary

      #       | Metric             | Result                          |
      #       |--------------------|----------------------------------|
      #       | Total Tests        | **${{ steps.test-summary.outputs.total }}**  |
      #       | ‚úÖ Passed          | **${{ steps.test-summary.outputs.passed }}** |
      #       | ‚ùå Failed          | **${{ steps.test-summary.outputs.failed }}** |

      #       ${{ steps.test-summary.outputs.failed == '0' && 'üéâ All tests passed!' || '‚ö†Ô∏è Some tests failed, please check the logs.' }}

      - name: Verify build works
        run: bun run build

      - name: Clean up kubectl proxy
        if: always()
        run: |
          # Always attempt to kill the proxy process even if previous steps fail
          if [ -n "$KUBECTL_PROXY_PID" ]; then
            echo "Stopping kubectl proxy (PID: $KUBECTL_PROXY_PID)"
            kill $KUBECTL_PROXY_PID || true
          fi

          # Restore the original kubeconfig (optional)
          sed -i 's|http://localhost:8080|https://192.168.49.2:8443|g' ~/.kube/config
